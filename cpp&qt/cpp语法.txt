局部静态变量：
当一个局部变量被声明为static时，它的生命周期被延长到程序的整个执行期间，而不仅仅是它所在的函数调用期间。
局部静态变量的值在函数调用之间保持不变，即它的值在函数调用结束后不会被销毁。
局部静态变量仅在第一次调用函数时初始化，之后每次调用都会保持上次的值。
它们在程序的全局存储区分配内存，而不是在栈上。

static是不可以在类的内部进行初始化的，而static const可以

cpp类中的变量的几种初始化方法：
	构造函数初始化列表： 构造函数初始化列表是在构造函数体执行之前用于初始化成员变量的。这是初始化成员变量的首选方法，因为它通常更高效。
MyClass(int xVal, double yVal) : x(xVal), y(yVal) {}
	构造函数体内初始化： 成员变量也可以在构造函数体中进行初始化，尽管这通常不是最高效的初始化方式。
 MyClass(int xVal, double yVal) {
        x = xVal;
        y = yVal;
    }
	默认成员初始化： 在C++11及以后的版本中，可以在类定义中为成员变量提供默认值。如果构造函数没有提供初始值，成员变量将自动使用这些默认值。
private:
    int x = 0; // 默认初始化为0
    double y = 1.0; // 默认初始化为1.0
public:
    MyClass() {} // 使用默认成员初始化
	初始化表达式（C++11及以后）： 使用初始化表达式可以在类定义中直接初始化成员变量，而无需在构造函数中初始化。
   int x{0}; // 初始化表达式
   double y{1.0}; // 初始化表达式



struct定义的是属于自己的数据类型,就和int那些基本类型一样定义变量

int32_t:32位有符号整数,c99标准引入